// Copyright 2007 by Capilano Computing Systems Ltd.
// This script is provided only as an example of possible
// applications of the DesignWorks scripting features.
// No correctness or fitness for any particular usage
// is expressed or implied.


// This script creates a set of netlist files for a hierarchical
// design in which the top level circuit is stored in one file
// and all subcircuit definitions are stored as separate files
// that are located by name


netlistExtension = ".net";

cct = currentCircuit;
if (cct == null)
{
	alert("There is no current design!");
	halt;		// No current design
}

if (!confirm("This will generate a set of netlist files for a hierarchical design "
				+ "in which the device subcircuits are stored as separate files.  "
				+ "This relies on all needed subcircuit files being available in "
				+ "the same directory as the design.  For an example of this, "
				+ "open the sample file Examples/Segmented Netlist Example/Top Circuit.cct"))
{
	halt;
}


// Create a directory with the same name as the design file

f = SPFile(cct.filePath);
f.extension = "";

topName = f.name;
cctDir = f.path + "\\";
netlistDir = cctDir + "netlists\\";		// Make a string with the directory path

createDirectory(netlistDir);

writeln("Creating netlists in " + netlistDir);


// Find the .RFM script relative to where we are

exportScript = SPFile();
exportScript.setScriptPath("export circuit definition.rfm");


// Create a list containing one unique entry for each device type

types = SPArray();
pinInterfaces = SPArray();
typeNames = SPStringMap();
pos = 0;
cctName = topName;
pinInterface = "";
weOpened = false;

while (cct != null)
{
	// Write the netlist for this circuit
	// We pass two arguments to the report script:
	//	- the name and path of the desired output file
	//	- the interface description, which is used to generate a pin
	//	  header that matches the parent device
	
	writeln("Writing netlist for " + cctName);
	changed = cct.changed;
	runExport(exportScript, false, netlistDir + cctName + netlistExtension, pinInterface);
	
	// Make a list of devices with subcircuit that need to be netlisted
	// into separate files
	
	devices = cct.devices(0, -1, 3);		// Get all devices in the entire design
	num = devices.length;

	for (i = 0; i < num; i++)
	{
		d = devices[i];
		if (typeNames.get(d.type.name) == null)
		{
			types.append(d.type.name);
			pinInterfaces.append(d.type.pinInterface);
			typeNames.set(d.type.name, "");
		}
	}
	
	// If we opened this circuit, now close it
	
	if (weOpened)
	{
		cct.changed = changed;
		cct.close();
	}
	
	// Look for another subcircuit to open
	
	while (pos < types.length)
	{
		cctName = types[pos];					// Create a circuit name using the type name of the symbol
		pinInterface = pinInterfaces[pos];		// Remember the pin interface from the parent
		pos++;
		cctFile = cctDir + cctName + ".cct";
		weOpened = !documentIsOpen(cctFile);
		cct = openDesign(cctFile);
		if (cct != null)
		{
			break;
		}
	}
}


alert("Done!");
